#!/usr/bin/env node

'use strict';

const fs = require('fs');
const Jimp = require('jimp');
const puppeteer = require('puppeteer');
const httpServer = require("http-server");
const dir = process.cwd();

var args = process.argv.slice(2)
  .map(arg => arg.split('='))
  .reduce((args, [value, key]) => {
    args[value] = key;
    return args;
  }, {});;

const WIDTH = parseInt(args.w) || 1024;
const HEIGHT = parseInt(args.h) || 768;

const server = httpServer.createServer({
  root: dir,
  cache: -1
});

server.listen(7090, function () {
  let jobs =
    fs.readdirSync(dir, {
      withFileTypes: true
    })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);

  jobs = jobs.filter(item => item !== "shared");

  const work = async (file) => {
    let browser;
    try {
      browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.setViewport({ width: WIDTH, height: HEIGHT });

      await page.goto('http://localhost:7090/' + file + "/" + file + ".html", {
        "waitUntil": "load"
      });

      await page.waitFor(2000);

      await page.screenshot({
        path: dir + "/" + file + '/' + file + '-full.jpg',
        type: "jpeg",
        clip: {
          x: 0,
          y: 0,
          width: WIDTH,
          height: HEIGHT
        }
      });

      const img = await Jimp.read(dir + "/" + file + '/' + file + '-full.jpg');
      await img.resize(200, 150).write(dir + "/" + file + '/' + file + '-thumb.jpg');

      browser.close();
      console.log(file);
    } catch (err) {
      console.log("---");
      console.log("ERROR: " + err.message);
      console.log("---");
    } finally {
      if (browser) {
        browser.close();
      }

      if (jobs.length) {
        work(jobs.pop());
      } else {
        setTimeout(() => {
          process.exit();
        }, 1000);
      }
    }
  };

  work(jobs.pop());
});